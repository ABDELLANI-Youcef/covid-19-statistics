{"ast":null,"code":"var _jsxFileName = \"/home/youcef/microverse/fullTime/REACT/covid-19-statistics/src/containers/List.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CountryItem from '../components/CountryItem';\nimport FilterForm from '../components/FilterForm';\nimport GlobalInformations from '../components/GlobalInformations';\nimport { createFilter, createCase } from '../actions/index';\nimport { gatherCasesInformations } from '../reducers/cases';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst List = ({\n  filter,\n  cases,\n  createFilter,\n  createCase\n}) => {\n  _s();\n\n  let countries = Object.keys(cases);\n  useEffect(() => {\n    if (countries.length === 0) {\n      gatherCasesInformations(createCase);\n    }\n  }, []);\n\n  const clickHandle = newFilter => {\n    createFilter(newFilter);\n  };\n\n  countries = Object.entries(cases).filter(row => {\n    const c = row[1].All;\n    return (c.continent === filter.continent || filter.continent === 'All') && (filter.maxCases < 0 || c.confirmed <= filter.maxCases) && (filter.minCases === 0 || c.confirmed >= filter.minCases) && (filter.maxDeaths < 0 || c.deaths <= filter.maxDeaths) && (filter.minDeaths === 0 || c.deaths >= filter.minDeaths);\n  }).map(e => e[0]);\n\n  if (countries.length > 0) {\n    countries = countries.map(place => /*#__PURE__*/_jsxDEV(CountryItem, {\n      country: place\n    }, place, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 40\n    }, this));\n  } else {\n    countries = null;\n  }\n\n  const world = countries !== null ? /*#__PURE__*/_jsxDEV(GlobalInformations, {\n    world: cases.Global.All\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 38\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FilterForm, {\n      filter: filter,\n      clickHandle: clickHandle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), world, /*#__PURE__*/_jsxDEV(\"p\", {\n      children: filter.continent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), countries]\n  }, void 0, true);\n};\n\n_s(List, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = List;\nList.propTypes = {\n  filter: PropTypes.objectOf(PropTypes.any).isRequired,\n  cases: PropTypes.objectOf(PropTypes.any).isRequired,\n  createFilter: PropTypes.func.isRequired,\n  createCase: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  cases: state.cases\n});\n\nconst mapDispatchToProps = {\n  createFilter: filter => createFilter(filter),\n  createCase\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/youcef/microverse/fullTime/REACT/covid-19-statistics/src/containers/List.js"],"names":["PropTypes","useEffect","connect","CountryItem","FilterForm","GlobalInformations","createFilter","createCase","gatherCasesInformations","List","filter","cases","countries","Object","keys","length","clickHandle","newFilter","entries","row","c","All","continent","maxCases","confirmed","minCases","maxDeaths","deaths","minDeaths","map","e","place","world","Global","propTypes","objectOf","any","isRequired","func","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CountryItem from '../components/CountryItem';\nimport FilterForm from '../components/FilterForm';\nimport GlobalInformations from '../components/GlobalInformations';\nimport { createFilter, createCase } from '../actions/index';\nimport { gatherCasesInformations } from '../reducers/cases';\n\nconst List = ({\n  filter, cases, createFilter, createCase,\n}) => {\n  let countries = Object.keys(cases);\n\n  useEffect(() => {\n    if (countries.length === 0) {\n      gatherCasesInformations(createCase);\n    }\n  }, []);\n\n  const clickHandle = newFilter => {\n    createFilter(newFilter);\n  };\n\n  countries = Object.entries(cases).filter(row => {\n    const c = row[1].All;\n    return (c.continent === filter.continent || filter.continent === 'All')\n            && (filter.maxCases < 0 || c.confirmed <= filter.maxCases)\n            && (filter.minCases === 0 || c.confirmed >= filter.minCases)\n            && (filter.maxDeaths < 0 || c.deaths <= filter.maxDeaths)\n            && (filter.minDeaths === 0 || c.deaths >= filter.minDeaths);\n  })\n    .map(e => e[0]);\n\n  if (countries.length > 0) {\n    countries = countries.map(place => <CountryItem key={place} country={place} />);\n  } else {\n    countries = null;\n  }\n  const world = countries !== null ? <GlobalInformations world={cases.Global.All} /> : null;\n  return (\n    <>\n      <FilterForm filter={filter} clickHandle={clickHandle} />\n      {world}\n      <p>\n        {filter.continent}\n      </p>\n      {countries}\n    </>\n  );\n};\n\nList.propTypes = {\n  filter: PropTypes.objectOf(PropTypes.any).isRequired,\n  cases: PropTypes.objectOf(PropTypes.any).isRequired,\n  createFilter: PropTypes.func.isRequired,\n  createCase: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  cases: state.cases,\n});\n\nconst mapDispatchToProps = {\n  createFilter: filter => createFilter(filter),\n  createCase,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n"]},"metadata":{},"sourceType":"module"}