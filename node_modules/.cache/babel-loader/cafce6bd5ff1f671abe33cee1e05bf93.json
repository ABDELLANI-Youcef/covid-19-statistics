{"ast":null,"code":"import{useEffect}from'react';import{connect}from'react-redux';import CountryItem from'../components/CountryItem';import FilterForm from'../components/FilterForm';import GlobalInformations from'../components/GlobalInformations';import{createFilter as _createFilter,createCase}from'../actions/index';import{gatherCasesInformations}from'../reducers/cases';import styles from'../styles/List.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var List=function List(_ref){var filter=_ref.filter,cases=_ref.cases,createFilter=_ref.createFilter,createCase=_ref.createCase;var countries=Object.keys(cases);useEffect(function(){if(countries===null){gatherCasesInformations(createCase);}},[]);var clickHandle=function clickHandle(newFilter){createFilter(newFilter);};countries=Object.entries(cases).filter(function(row){var c=row[1].All;return(c.continent===filter.continent||filter.continent==='All')&&(filter.maxCases<0||c.confirmed<=filter.maxCases)&&(filter.minCases===0||c.confirmed>=filter.minCases)&&(filter.maxDeaths<0||c.deaths<=filter.maxDeaths)&&(filter.minDeaths===0||c.deaths>=filter.minDeaths);}).map(function(e){return e[0];});if(countries.length>0){countries=countries.filter(function(e){return e!=='Global';}).map(function(place){return/*#__PURE__*/_jsx(CountryItem,{country:cases[place].All,name:place},place);});}else{countries=null;}var world=countries!==null?/*#__PURE__*/_jsx(GlobalInformations,{world:cases.Global.All}):null;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FilterForm,{filter:filter,clickHandle:clickHandle}),world,/*#__PURE__*/_jsx(\"div\",{className:styles.list,children:countries})]});};var mapStateToProps=function mapStateToProps(state){return{filter:state.filter,cases:state.cases};};var mapDispatchToProps={createFilter:function createFilter(filter){return _createFilter(filter);},createCase:createCase};export default connect(mapStateToProps,mapDispatchToProps)(List);","map":{"version":3,"sources":["/home/youcef/microverse/fullTime/REACT/covid-19-statistics/src/containers/List.js"],"names":["useEffect","connect","CountryItem","FilterForm","GlobalInformations","createFilter","createCase","gatherCasesInformations","styles","List","filter","cases","countries","Object","keys","clickHandle","newFilter","entries","row","c","All","continent","maxCases","confirmed","minCases","maxDeaths","deaths","minDeaths","map","e","length","place","world","Global","list","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CountryItem from '../components/CountryItem';\nimport FilterForm from '../components/FilterForm';\nimport GlobalInformations from '../components/GlobalInformations';\nimport { createFilter, createCase } from '../actions/index';\nimport { gatherCasesInformations } from '../reducers/cases';\nimport styles from '../styles/List.module.css';\n\nconst List = ({\n  filter, cases, createFilter, createCase,\n}) => {\n  let countries = Object.keys(cases);\n\n  useEffect(() => {\n    if (countries === null) {\n      gatherCasesInformations(createCase);\n    }\n  }, []);\n\n  const clickHandle = newFilter => {\n    createFilter(newFilter);\n  };\n\n  countries = Object.entries(cases).filter(row => {\n    const c = row[1].All;\n    return (c.continent === filter.continent || filter.continent === 'All')\n            && (filter.maxCases < 0 || c.confirmed <= filter.maxCases)\n            && (filter.minCases === 0 || c.confirmed >= filter.minCases)\n            && (filter.maxDeaths < 0 || c.deaths <= filter.maxDeaths)\n            && (filter.minDeaths === 0 || c.deaths >= filter.minDeaths);\n  })\n    .map(e => e[0]);\n\n  if (countries.length > 0) {\n    countries = countries.filter(e => e !== 'Global').map(place => <CountryItem key={place} country={cases[place].All} name={place} />);\n  } else {\n    countries = null;\n  }\n  const world = countries !== null ? <GlobalInformations world={cases.Global.All} /> : null;\n  return (\n    <>\n      <FilterForm filter={filter} clickHandle={clickHandle} />\n      {world}\n      <div className={styles.list}>\n        {countries}\n      </div>\n    </>\n  );\n};\n\nList.propTypes = {\n  filter: PropTypes.objectOf(PropTypes.any).isRequired,\n  cases: PropTypes.objectOf(PropTypes.any).isRequired,\n  createFilter: PropTypes.func.isRequired,\n  createCase: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  cases: state.cases,\n});\n\nconst mapDispatchToProps = {\n  createFilter: filter => createFilter(filter),\n  createCase,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n"]},"metadata":{},"sourceType":"module"}