{"ast":null,"code":"var _jsxFileName = \"/home/youcef/microverse/fullTime/REACT/covid-19-statistics/src/containers/List.js\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport CountryItem from '../components/CountryItem';\nimport FilterForm from '../components/FilterForm';\nimport GlobalInformations from '../components/GlobalInformations';\nimport { createFilter } from '../actions/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst List = ({\n  filter,\n  cases,\n  createFilter\n}) => {\n  let countries = Object.keys(cases);\n\n  const clickHandle = newFilter => {\n    createFilter(newFilter);\n  };\n\n  countries = Object.entries(cases).filter(row => {\n    const c = row[1].All;\n    return (c.continent === filter.continent || filter.continent === 'All') && (filter.maxCases < 0 || c.confirmed <= filter.maxCases) && (filter.minCases === 0 || c.confirmed >= filter.minCases) && (filter.maxDeaths < 0 || c.deaths <= filter.maxDeaths) && (filter.minDeaths === 0 || c.deaths >= filter.minDeaths);\n  }).map(e => e[0]);\n\n  if (countries.length > 0) {\n    countries = countries.map(place => /*#__PURE__*/_jsxDEV(CountryItem, {\n      country: place\n    }, place, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 40\n    }, this));\n  } else {\n    countries = null;\n  }\n\n  const world = countries.length > 0 ? /*#__PURE__*/_jsxDEV(GlobalInformations, {\n    world: cases.global.All\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 40\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FilterForm, {\n      filter: filter,\n      clickHandle: clickHandle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), world, /*#__PURE__*/_jsxDEV(\"p\", {\n      children: filter.continent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: '/country',\n        state: {\n          country: 'palestine'\n        }\n      },\n      children: \"More details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), countries]\n  }, void 0, true);\n};\n\n_c = List;\nList.propTypes = {\n  filter: PropTypes.objectOf(PropTypes.any).isRequired,\n  cases: PropTypes.objectOf(PropTypes.any).isRequired,\n  createFilter: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  cases: state.cases\n});\n\nconst mapDispatchToProps = {\n  createFilter: filter => createFilter(filter)\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/youcef/microverse/fullTime/REACT/covid-19-statistics/src/containers/List.js"],"names":["PropTypes","connect","Link","CountryItem","FilterForm","GlobalInformations","createFilter","List","filter","cases","countries","Object","keys","clickHandle","newFilter","entries","row","c","All","continent","maxCases","confirmed","minCases","maxDeaths","deaths","minDeaths","map","e","length","place","world","global","pathname","state","country","propTypes","objectOf","any","isRequired","func","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport CountryItem from '../components/CountryItem';\nimport FilterForm from '../components/FilterForm';\nimport GlobalInformations from '../components/GlobalInformations';\nimport { createFilter } from '../actions/index';\n\nconst List = ({ filter, cases, createFilter }) => {\n  let countries = Object.keys(cases);\n  const clickHandle = newFilter => {\n    createFilter(newFilter);\n  };\n\n  countries = Object.entries(cases).filter(row => {\n    const c = row[1].All;\n    return (c.continent === filter.continent || filter.continent === 'All')\n            && (filter.maxCases < 0 || c.confirmed <= filter.maxCases)\n            && (filter.minCases === 0 || c.confirmed >= filter.minCases)\n            && (filter.maxDeaths < 0 || c.deaths <= filter.maxDeaths)\n            && (filter.minDeaths === 0 || c.deaths >= filter.minDeaths);\n  })\n    .map(e => e[0]);\n\n  if (countries.length > 0) {\n    countries = countries.map(place => <CountryItem key={place} country={place} />);\n  } else {\n    countries = null;\n  }\n  const world = countries.length > 0 ? <GlobalInformations world={cases.global.All} /> : null;\n  return (\n    <>\n      <FilterForm filter={filter} clickHandle={clickHandle} />\n      {world}\n      <p>\n        {filter.continent}\n      </p>\n      <Link to={{ pathname: '/country', state: { country: 'palestine' } }}>More details</Link>\n      {countries}\n    </>\n  );\n};\n\nList.propTypes = {\n  filter: PropTypes.objectOf(PropTypes.any).isRequired,\n  cases: PropTypes.objectOf(PropTypes.any).isRequired,\n  createFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  cases: state.cases,\n});\n\nconst mapDispatchToProps = {\n  createFilter: filter => createFilter(filter),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n"]},"metadata":{},"sourceType":"module"}