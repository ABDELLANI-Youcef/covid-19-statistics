{"ast":null,"code":"var _jsxFileName = \"/home/youcef/microverse/fullTime/REACT/covid-19-statistics/src/containers/List.js\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport CountryItem from '../components/CountryItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst List = ({\n  filter,\n  cases\n}) => {\n  let countries = Object.keys(cases);\n\n  if (countries.length > 0) {\n    countries = countries.map(place => /*#__PURE__*/_jsxDEV(CountryItem, {\n      country: place\n    }, place, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 40\n    }, this));\n  } else {\n    countries = '';\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hello world in our application!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: '/country',\n        state: {\n          country: 'palestine'\n        }\n      },\n      children: \"More details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), countries]\n  }, void 0, true);\n};\n\n_c = List;\nList.propTypes = {\n  filter: PropTypes.string.isRequired,\n  cases: PropTypes.objectOf(PropTypes.any).isRequired\n};\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  cases: state.cases\n});\n\nexport default connect(mapStateToProps)(List);\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/youcef/microverse/fullTime/REACT/covid-19-statistics/src/containers/List.js"],"names":["PropTypes","connect","Link","CountryItem","List","filter","cases","countries","Object","keys","length","map","place","pathname","state","country","propTypes","string","isRequired","objectOf","any","mapStateToProps"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAuB;AAClC,MAAIC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAhB;;AAEA,MAAIC,SAAS,CAACG,MAAV,GAAmB,CAAvB,EAA0B;AACxBH,IAAAA,SAAS,GAAGA,SAAS,CAACI,GAAV,CAAcC,KAAK,iBAAI,QAAC,WAAD;AAAyB,MAAA,OAAO,EAAEA;AAAlC,OAAkBA,KAAlB;AAAA;AAAA;AAAA;AAAA,YAAvB,CAAZ;AACD,GAFD,MAEO;AACLL,IAAAA,SAAS,GAAG,EAAZ;AACD;;AACD,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA,YAJF,eAOE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAE;AAAEQ,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAA/B,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,EAQGR,SARH;AAAA,kBADF;AAYD,CApBD;;KAAMH,I;AAsBNA,IAAI,CAACY,SAAL,GAAiB;AACfX,EAAAA,MAAM,EAAEL,SAAS,CAACiB,MAAV,CAAiBC,UADV;AAEfZ,EAAAA,KAAK,EAAEN,SAAS,CAACmB,QAAV,CAAmBnB,SAAS,CAACoB,GAA7B,EAAkCF;AAF1B,CAAjB;;AAKA,MAAMG,eAAe,GAAGP,KAAK,KAAK;AAChCT,EAAAA,MAAM,EAAES,KAAK,CAACT,MADkB;AAEhCC,EAAAA,KAAK,EAAEQ,KAAK,CAACR;AAFmB,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACoB,eAAD,CAAP,CAAyBjB,IAAzB,CAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport CountryItem from '../components/CountryItem';\n\nconst List = ({ filter, cases }) => {\n  let countries = Object.keys(cases);\n\n  if (countries.length > 0) {\n    countries = countries.map(place => <CountryItem key={place} country={place} />);\n  } else {\n    countries = '';\n  }\n  return (\n    <>\n      <p>\n        Hello world in our application!\n      </p>\n      <p>\n        {filter}\n      </p>\n      <Link to={{ pathname: '/country', state: { country: 'palestine' } }}>More details</Link>\n      {countries}\n    </>\n  );\n};\n\nList.propTypes = {\n  filter: PropTypes.string.isRequired,\n  cases: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  cases: state.cases,\n});\n\nexport default connect(mapStateToProps)(List);\n"]},"metadata":{},"sourceType":"module"}